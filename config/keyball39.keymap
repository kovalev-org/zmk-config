/*                              36 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4     │      5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0     │     RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14     │     15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0     │     RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24     │     25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0     │     RB0 RB1 RB2 RB3 RB4 │
  │ 30  31  32  33  34  35 │ 36  37              38 │ │ LH5 LH4 LH3 LH2 LH1 LH0 │ RH0 RH1             RH2 │
  ╰────────────────────────┴────────────────────────╯ ╰─────────────────────────┴─────────────────────────╯             */

#pragma once

#define LT0  4  // left-top row
#define LT1  3
#define LT2  2
#define LT3  1
#define LT4  0

#define RT0  5  // right-top row
#define RT1  6
#define RT2  7
#define RT3  8
#define RT4  9

#define LM0 14  // left-middle row
#define LM1 13
#define LM2 12
#define LM3 11
#define LM4 10

#define RM0 15  // right-middle row
#define RM1 16
#define RM2 17
#define RM3 18
#define RM4 19

#define LB0 24  // left-bottom row
#define LB1 23
#define LB2 22
#define LB3 21
#define LB4 20

#define RB0 25  // right-bottom row
#define RB1 26
#define RB2 27
#define RB3 28
#define RB4 29

#define LH0 35  // left thumb keys
#define LH1 34
#define LH2 33
#define LH3 32
#define LH4 31
#define LH6 30

#define RH0 36  // right thumb keys
#define RH1 37
#define RH2 38

#define DEFAULT 0
#define SYM     1
#define NUM     2


#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include "zmk-helpers/helper.h"


&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.


/* Left-hand HRMs. */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

/* Right-hand HRMs. */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };



    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q      &kp W         &kp E     &kp R         &kp T                                    &kp Y            &kp U  &kp I      &kp O    &kp P
&hml LGUI A   &hml LALT S   &hml LSHFT D  &hml LCTRL F         &kp G                                    &kp H            &hmr RCTRL J  &hmr RSHFT K  &hmr RALT L   &hmr RGUI SEMI
&kp Z      &kp X         &kp C     &kp V         &kp B                                    &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP     &kp ESCAPE &lt NUM SPACE &kp TAB &kp ENTER  &lt SYM BACKSPACE                             &kp  PRINTSCREEN
            >;
        };



        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp UP_ARROW      &kp DOLLAR    &kp PERCENT                  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&hml LGUI PAGE_UP    &hml LALT LEFT_ARROW      &hml LSHFT DOWN_ARROW   &hml LCTRL RIGHT_ARROW  &kp HASH                        &hmr RCTRL PIPE2        &hmr RSHFT LEFT_BRACE      &hmr RALT RIGHT_BRACE  &hmr RGUI LEFT_BRACKET     &kp RIGHT_BRACKET
&kp PAGE_DOWN  &none &none &none       &kp GRAVE                      &mkp RCLK  &kp UNDERSCORE       &kp DOUBLE_QUOTES           &kp SINGLE_QUOTE                &kp NON_US_BACKSLASH
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR &mkp RCLK        &mkp LCLK &mkp MCLK  &mkp MCLK  &mkp LCLK  &none
            >;
        };

        
        function_layer {
            label = "NUM";
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &none                   &kp PLUS   &kp N7  &kp N8  &kp N9  &kp PLUS
&kp F5  &kp F6   &kp F7   &kp F8   &none                   &kp MINUS  &kp N4  &kp N5  &kp N6  &kp MINUS
&kp F9  &kp F10  &kp F11  &kp F12  &none                   &kp EQUAL &kp N1   &kp N2  &kp N3   &kp EQUAL
&none  &none   &none   &none   &none  &none  &kp N0  &kp N0                       &none
            >;
        };

        

        
    };
};
